Authentication
==============

Security model
--------------

To establish the authenticity of a request, the server performs a message integrity check using a cryptographic primitive known as a HMAC (hash-based message authentication code). A MAC code is attached to each request, in the form of an ``API-Access`` header. During dispatch, a subsequent code is computed from the request object using a token associated with the client application. The result of this operation is compared against the MAC attached to the request in order to verify or refute its authenticity.

Table schema
************

::

    CREATE TABLE trombone_keys (
        id serial,
        client character varying(40),
        key character varying(40)
    );

    ALTER TABLE ONLY trombone_keys
        ADD CONSTRAINT trombone_keys PRIMARY KEY (id);

    ALTER TABLE ONLY trombone_keys
        ADD CONSTRAINT unique_trombone_keys_client UNIQUE (client);


.. NOTE::
   This table is automatically created when the server is started with authentication enabled (which it is by default).

Registering client applications
*******************************

In order for a client application to authenticate with the service, it must;

1. be present in the ``trombone_keys`` database table with a unique identifier and secure token; as well as
2. supply the following HTTP header with each request:

:: 

    API-Access: <client>:<hash>


    
where ``<client>`` is replaced with the name used to identify the application, and ``<hash>`` with the MAC code generated by combining the request body with aforementioned key, using the `HMAC-SHA1 <http://en.wikipedia.org/wiki/SHA-1>`_ algorithm.

SHA1 implementations are widely available for most programming languages. The following have been tested with Trombone:

========== ===============================================================       
JavaScript https://code.google.com/p/crypto-js/ 
Haskell    http://hackage.haskell.org/package/Crypto/docs/Data-HMAC.html
========== ===============================================================       

The key is a random 40-character hexadecimal string.

::

    SELECT encode(digest(random()::text, 'sha1'), 'hex');

Client key administration
`````````````````````````

A simple bash script, such as the one presented here, can be used to administrate client keys.

::

    #!/bin/bash
    
    # Replace <database> below with name of database
    db="<database>"  
    
    # PostgreSQL user
    psql_user="postgres"
    
    # Modify according to host environment
    psql_cmd="sudo -u $psql_user psql -d $db -c" 
    
    case $1 in
        list)
            eval "$psql_cmd \"SELECT client, key FROM trombone_keys;\"" | tail -n+3 | head -n-2 | awk '{printf "%-20s %-40s\n", $1, $3}'
            ;;
        register)
            eval "$psql_cmd \"INSERT INTO trombone_keys (client, key) VALUES ('$2', encode(digest(random()::text, 'sha1'), 'hex'));\""
            ;;
        renew)
            eval "$psql_cmd \"UPDATE trombone_keys SET key = encode(digest(random()::text, 'sha1'), 'hex') WHERE client = '$2';\""
            ;;
        revoke)
            eval "$psql_cmd \"DELETE FROM trombone_keys WHERE client = '$2';\""
            ;;
        *)
            echo "Usage: $0 {list|register|renew|revoke} [client]"
            exit 1
    esac

Edit the file as required; save, e.g. as ``keyadmin.sh``; and assign necessary permissions.

::

    chmod +x keyadmin.sh

Then use the command as:

::

    $ ./keyadmin.sh list

    generic              14ad0ef86bf392b38bad6009113c2a5a8a1d993a
    batman               53d5864520d65aa0364a52ddbb116ca78e0df8dc
    spock                78a302b6d3e0e37d2e37cf932955781900c46eca

::

    $ ./keyadmin.sh register my_application

After registering an application, it should appear in the client list with its key.

::

    $ ./keyadmin.sh list | grep my_application

    my_application       53d5864520d65aa0364a52ddbb116ca78e0df8dc

To remove a client, use:

::

    $ ./keyadmin.sh revoke unwanted_client

JavaScript implementation
*************************

@todo

Disable HMAC authentication
***************************

Message authentication can be disabled with the ``-x`` command line switch. Doing so in a production environment is not recommended, since it renders the system vulnerable to unauthorized access.

.. WARNING::
   Disabling authentication gives everyone access to your API.

Allowing access from localhost
``````````````````````````````

To circumvent HMAC authentication specifically for requests originating from a local host, instead use the ``-t``, or ``--trust-localhost`` option. 

