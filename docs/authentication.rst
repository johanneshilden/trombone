Authentication
==============

Security model
--------------

To establish the authenticity of a request, the server performs a message integrity check using a cryptographic primitive known as a HMAC (hash-based message authentication code). A MAC code is attached to each request, in the form of an ``API-Access`` header. A subsequent code is computed from the request object using a token associated with the client application. The result of this operation is compared to the MAC attached to the request in order to verify or refute its authenticity.

Table schema
************

::

    CREATE TABLE trombone_keys (
        id serial,
        client character varying(40),
        key character varying(40)
    );

    ALTER TABLE ONLY trombone_keys
        ADD CONSTRAINT trombone_keys PRIMARY KEY (id);

Authentication is enabled by default. A client application that wishes to consume the service must therefore;

1. be present in the ``trombone_keys`` database table with a unique identifier and the secure token; as well as
2. supply the following HTTP header with each request:

:: 

    API-Access: client:hash

Replace ``hash`` with the MAC code generated by combining the request body with aforementioned key, using the HMAC-SHA1 algorithm.

| This is some text
|

SHA1 implementations are widely available for most programming languages. 

JavaScript
    https://code.google.com/p/crypto-js/

Haskell
    http://hackage.haskell.org/package/Crypto/docs/Data-HMAC.html

JavaScript implementation
*************************

@todo

Disable HMAC authentication
***************************

Message authentication can be disabled with the ``-x`` command line switch. Doing so is not recommended in a production environment, since it renders the system vulnerable to unauthorized access.

To circumvent HMAC authentication specifically for requests originating from the local host, instead use the ``-t``, or ``--trust-localhost`` option. 

