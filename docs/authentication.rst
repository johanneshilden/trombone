Authentication
==============

Security model
--------------

To establish the authenticity of a request, the server performs a message integrity check using a cryptographic primitive known as a HMAC (hash-based message authentication code). A MAC code is attached to each request, in the form of an ``API-Access`` header. During dispatch, a subsequent code is computed from the request object using a token associated with the client application. The result of this operation is compared against the MAC attached to the request in order to verify or refute its authenticity.

Table schema
************

::

    CREATE TABLE trombone_keys (
        id serial,
        client character varying(40),
        key character varying(40)
    );

    ALTER TABLE ONLY trombone_keys
        ADD CONSTRAINT trombone_keys PRIMARY KEY (id);

    ALTER TABLE ONLY trombone_keys
        ADD CONSTRAINT unique_trombone_keys_client UNIQUE (client);


.. NOTE::
   This table is automatically created when the server is started with authentication enabled.

Registering a client application
********************************

Authentication is enabled by default. A client application that wishes to consume the service must therefore;

1. be present in the ``trombone_keys`` database table with a unique identifier and secure token; as well as
2. supply the following HTTP header with each request:

:: 

    API-Access: <client>:<hash>

Replace ``<client>`` with the name of the client application, and ``<hash>`` with the MAC code generated by combining the request body with aforementioned key, using the HMAC-SHA1 algorithm.

SHA1 implementations are widely available for most programming languages. The following have been tested with Trombone:

========== ===============================================================       
JavaScript https://code.google.com/p/crypto-js/ 
Haskell    http://hackage.haskell.org/package/Crypto/docs/Data-HMAC.html
========== ===============================================================       

Client key administration
`````````````````````````

The following are some ``psql`` commands that can be used to manage client keys from the CLI.

==================== ==============================================================================================================================================       
Task                 Command
-------------------- ----------------------------------------------------------------------------------------------------------------------------------------------       
List clients         ``$ psql -d <database> -c "SELECT * FROM trombone_keys;"``
Register a client    ``$ psql -d <database> -c "INSERT INTO trombone_keys (client, key) VALUES ('<application>', encode(digest(random()::text, 'sha1'), 'hex'));"``
Re-generate password ``$ psql -d <database> -c "UPDATE trombone_keys SET key = encode(digest(random()::text, 'sha1'), 'hex') WHERE client = '<application>';"``
Remove a client      ``$ psql -d <database> -c "DELETE FROM trombone_keys WHERE client = '<application>';"``
==================== ==============================================================================================================================================       

JavaScript implementation
*************************

@todo

Disable HMAC authentication
***************************

Message authentication can be disabled with the ``-x`` command line switch. Doing so is not recommended in a production environment, since it renders the system vulnerable to unauthorized access.

Allowing access from localhost
``````````````````````````````

To circumvent HMAC authentication specifically for requests originating from a local host, instead use the ``-t``, or ``--trust-localhost`` option. 

