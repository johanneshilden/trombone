{-# LANGUAGE OverloadedStrings #-}
module Trombone.Parse 
    ( parseRoutes
    ) where

import Control.Applicative
import Control.Monad                                          ( liftM )
import Data.Aeson
import Data.Attoparsec.Text
import Data.List                                              ( foldl' )
import Data.Monoid                                            ( (<>) )
import Data.Text                                              ( Text )
import Data.Text.Encoding
import Network.HTTP.Types.Method
import Trombone.Db.Parse
import Trombone.Db.Reflection
import Trombone.Db.Template
import Trombone.Pipeline
import Trombone.Pipeline.Json
import Trombone.Response
import Trombone.Route
import Trombone.RoutePattern

import qualified Data.Attoparsec.Text                         as PT
import qualified Data.ByteString.Lazy.Char8                   as L8
import qualified Data.Text                                    as T

-- | Parse an HTTP method.
method :: Parser Method
method = try ( match "GET"     )
     <|> try ( match "POST"    )
     <|> try ( match "PUT"     )
     <|> try ( match "PATCH"   )
     <|> try ( match "DELETE"  )
     <|>       match "OPTIONS"  
  where
    match = (>>) <$> string 
                <*> (return . encodeUtf8)

-- | Match a single alphanumeric character.
alphaNum :: Parser Char
alphaNum = letter <|> digit

-- | Accept strings made up strictly of alphanumeric characters together
-- with a subset of the special ascii characters.
literal :: Parser Text
literal = T.pack <$> many1 (alphaNum <|> satisfy (inClass "-_!~"))

-- | A comma-separated list of items.
elements :: Parser [Text]
elements = sepBy cell $ char ',' 

-- | A list item.
cell :: Parser Text
cell = skipSpace *> PT.takeWhile (notInClass ",\n\r) ") <* skipSpace

-- | Parse a route pattern.
uri :: Parser RoutePattern
uri = optional slsh *> liftM RoutePattern (item `sepBy` slsh) <* optional slsh
  where
    item = variable <|> atom
    slsh = char '/'

-- | Parse a uri variable segment.
variable :: Parser RouteSegment
variable = char ':' >> liftM Variable literal 

-- | Parse a text uri segment.
atom :: Parser RouteSegment
atom = liftM Atom literal

-- | Parse a single line of input generated by the preprocessor.
line :: Parser [Route]
line = skipSpace *> try route <|> dryBlock 

route :: Parser [Route]
route = return <$> 
    ( Route <$> method <* skipSpace
            <*> uri    <* skipSpace
            <*> action )

dryBlock :: Parser [Route]
dryBlock = undefined -- return []

-- | Any of the valid route action types.
action :: Parser RouteAction
action = try sqlRoute
     <|> try pipelineRoute
     <|> try inlineRoute
     <|> try staticRoute
     <|> nodeJsRoute

-- | A database query route.
sqlRoute :: Parser RouteAction
sqlRoute = try sqlNoResult 
       <|> try sqlItem
       <|> try sqlItemOk
       <|> try sqlCollection
       <|> try sqlLastInsert
       <|> sqlCount

resultFromTemplate :: DbResult -> DbTemplate -> Parser RouteAction
resultFromTemplate res = return . RouteSql . DbQuery res 

-- | An optional list of field names used for db routes.
hints :: Parser [Text]
hints = char '(' *> elements <* char ')'

-- | A PostgreSQL route of type that returns no result.
sqlNoResult :: Parser RouteAction
sqlNoResult = string "--" >> skipSpace 
    *> takeTill isEndOfLine 
        >>= resultFromTemplate NoResult 
            . parseDbTemplate

-- | A PostgreSQL route of type that returns a single item.
sqlItem :: Parser RouteAction
sqlItem = string "~>" >> sqlres Item

-- | A PostgreSQL route of type that returns a single item with an 'Ok' status 
-- message.
sqlItemOk :: Parser RouteAction
sqlItemOk = string "->" >> sqlres ItemOk

-- | A PostgreSQL route of type that returns a collection.
sqlCollection :: Parser RouteAction
sqlCollection = string ">>" >> sqlres Collection

-- | A PostgreSQL route of type that returns the last inserted id.
sqlLastInsert :: Parser RouteAction
sqlLastInsert = string "<>" >> 
    skipSpace *> try params <|> inspect 
  where
    params = hints >>= \[table, s] -> 
        liftM (RouteSql . DbQuery (LastInsert table s) 
                        . parseDbTemplate) 
                        $ takeTill isEndOfLine
    inspect = takeTill isEndOfLine >>= \q -> 
        let tpl = parseDbTemplate q in
        case probeTemplate tpl of
            (Just tbl, _) -> resultFromTemplate (LastInsert tbl "id") tpl
            _             -> error 
                    "Unable to infer table name from SQL statement."

-- | A PostgreSQL route of type that returns a row count.
sqlCount :: Parser RouteAction
sqlCount = string "><" >> 
    skipSpace *> takeTill isEndOfLine 
        >>= resultFromTemplate Count . parseDbTemplate 

sqlres :: ([Text] -> DbResult) -> Parser RouteAction
sqlres c = skipSpace *> try params <|> inspect c
  where
    params = hints >>= \h -> takeTill isEndOfLine 
                   >>= resultFromTemplate (c h) . parseDbTemplate 
    inspect res = takeTill isEndOfLine >>= \q -> 
        let tpl = parseDbTemplate q in
        case probeTemplate tpl of
            (Just tbl, Just ["*"]) -> resultFromTemplate (res ["*", tbl]) tpl
            (_, Just cs)           -> resultFromTemplate (res cs) tpl
            _                      -> error 
                    "Unable to extract column names from SQL template. \
                    \An explicit parameter list is required in the route configuration."

-- | Parse a pipeline route.
pipelineRoute :: Parser RouteAction
pipelineRoute = applyAfter "||" RouteNodeJs 

-- | Parse an inlined pipeline route.
inlineRoute :: Parser RouteAction
inlineRoute = applyAfter "|>" f
  where
    f :: Text -> RouteAction
    f t = case pipe t of
        Left e  -> error $ "Error parsing pipeline: " ++ e
        Right p -> RouteInline p
    pipe :: Text -> Either String Pipeline
    pipe = eitherDecode . L8.fromStrict . encodeUtf8 . flip T.append "}"
 
-- | Parse a static route.
staticRoute :: Parser RouteAction
staticRoute = applyAfter "{..}" f
  where
    f :: Text -> RouteAction
    f t = case json t of
            Just v -> RouteStatic $ RouteResponse [] 200 v
            Nothing -> error 
                "Failed to parse JSON data in static route pattern."
    json :: Text -> Maybe Value
    json = decode . L8.fromStrict . encodeUtf8 

-- | Parse a node.js route.
nodeJsRoute :: Parser RouteAction
nodeJsRoute = liftM RouteNodeJs $
    string "<js>" >> skipSpace *> takeTill isEndOfLine

applyAfter :: Text -> (Text -> r) -> Parser r
applyAfter symb f = liftM f $ string symb >> skipSpace *> takeTill isEndOfLine

-------------------------------------------------------------------------------
-- Preprocessing
-------------------------------------------------------------------------------

preprocess :: Text -> [Text]
preprocess = collapse . fmap uncomment . T.lines 

-- | Strip out everything on a line including and after its first # character.
uncomment :: Text -> Text
uncomment = fst . T.breakOn "#" 

-- | Canonicalize source input to a format with exactly one route pattern per
-- entry of the list.
collapse :: [Text] -> [Text]
collapse ls = 
    let (x, xs) = foldl' f ("", []) ls in filter notNull $ reverse (x:xs)
  where
    notNull = not . T.null . T.strip

f :: (Text, [Text]) -> Text -> (Text, [Text])
f (x,xs) a | T.null a || ' ' == T.head a = (" " `coalesce` a, xs)
           | T.head a `elem` "{}" = (T.snoc "\n" (T.head a) `coalesce` T.tail a, xs)
           | otherwise       = (T.strip a, x:xs)
  where
    coalesce a b | T.null x || "\n" `T.isSuffixOf` x = x      <> T.strip b
                 | otherwise                        = x <> a <> T.strip b
 
-------------------------------------------------------------------------------
-- Parsing
-------------------------------------------------------------------------------

parseRoutes :: Text -> IO [Route]
parseRoutes = return . concatMap f . preprocess 
  where
    f x = prs x (parse line $ T.append "\n" x)
    prs _ (Done _ r  ) = r
    prs _ (Fail _ _ m) = error m
    prs line _         = error $ "Invalid route format: " ++ T.unpack line
 
