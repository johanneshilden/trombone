{-# LANGUAGE OverloadedStrings #-}
module Trombone.Response 
    ( RouteResponse(..)
    , ResponseError(..)
    , errorResponse
    , okResponse
    , okResponse_
    , responseCode
    , sendJsonResponse
    , sendJsonResponseOr404
    ) where

import Data.Aeson
import Data.HashMap.Strict                             ( fromList, union )
import Data.Maybe                                      ( fromMaybe )
import Data.Text                                       ( Text, pack )
import Network.HTTP.Types                              
import Network.Wai                                     ( Response, responseLBS )

-- | A response generated by a route action.
data RouteResponse = RouteResponse Int Value
    deriving (Show)

data ResponseError
  = ErrorBadRequest
  | ErrorNotFound
  | ErrorUnauthorized
  | ErrorConflict
  -- SQL errors
  | ErrorSqlConstraintViolation
  | ErrorSqlUniqueViolation
  | ErrorSqlGeneric
  -- Unspecified server error
  | ErrorServerGeneric

toText :: ResponseError -> Text
toText ErrorBadRequest             = "BAD_REQUEST"
toText ErrorNotFound               = "NOT_FOUND"
toText ErrorUnauthorized           = "UNAUTHORIZED"
toText ErrorConflict               = "CONFLICT"
toText ErrorSqlConstraintViolation = "SQL_FOREIGN_KEY_CONSTRAINT_VIOLATION"
toText ErrorSqlUniqueViolation     = "SQL_UNIQUE_CONSTRAINT_VIOLATION"
toText ErrorSqlGeneric             = "SQL_ERROR"
toText _                           = "INTERNAL_SERVER_ERROR"

-- | JSON response used for errors.
data ErrorObj = ErrorObj Int Text Text

instance ToJSON ErrorObj where
    toJSON (ErrorObj code err msg)
        = object [ "status"       .= False
                 , "error"        .= err
                 , "responseCode" .= code
                 , "message"      .= msg ]

responseCode :: ResponseError -> Int
responseCode ErrorBadRequest    = 400
responseCode ErrorNotFound      = 404
responseCode ErrorUnauthorized  = 401
responseCode ErrorConflict      = 409
responseCode _                  = 500

errorResponse :: ResponseError -> Text -> RouteResponse
errorResponse re = RouteResponse code . toJSON . ErrorObj code err 
  where code = responseCode re
        err  = toText re

okResponse_ :: [(Text, Value)] -> RouteResponse
okResponse_ = RouteResponse 200 . Object . fromList 

-- | Ok response with default message and status properties, 
-- unless already present in the provided lookup table.
okResponse :: [(Text, Value)] -> RouteResponse
okResponse r = RouteResponse i (decorate v)
  where (RouteResponse i v) = okResponse_ r
        decorate (Object o) = Object $ union o defaults
        defaults = fromList [("message", "Ok."), ("status", Bool True)]

-- | Send a JSON response from the supplied response object.
sendJsonResponse :: RouteResponse -> Response
sendJsonResponse (RouteResponse st val) = responseLBS (Status st "") headers body
  where headers = [("Content-Type", "application/json; charset=utf-8")]
        body = encode val

sendJsonResponseOr404 :: Maybe RouteResponse -> Response
sendJsonResponseOr404 = sendJsonResponse . fromMaybe (errorResponse ErrorNotFound "Resource not found.") 

